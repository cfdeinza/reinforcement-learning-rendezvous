"""
The purpose of this script is to plot the results generated by the EvalCallback wrapper.
AFAIK, EvalCallback generates a numpy file (.npz) called "evaluations.npz"  in a specified log_path.
The file works kind-of like a dictionary. It has three keys: timesteps, results, and ep_lengthts.
Each key points to an ndarray.
    "timesteps" shows on which timestep each evaluation took place.
    "results" shows the total reward obtained during each episode. (by default, 5 episodes are run on each evaluation,
        but you can change that using the n_eval_episodes argument)
    "ep_lengths" shows the length of each episode.
"""

import numpy as np
import matplotlib.pyplot as plt
import argparse

# print(__name__)


def plot_learning(args):

    path = args.path
    print(f'Loading file "{path}"...')
    with np.load(path)as data:
        time = data['timesteps']
        rew = data['results']
        rew_avg = np.mean(rew, axis=1)

    print('Plotting figure...')
    fig = plt.figure(num=1, clear=True, figsize=(9, 9))

    plt.plot(time, rew_avg)
    plt.grid()
    plt.xlabel('Time steps')
    plt.ylabel('Average episode reward')
    plt.xlim([0, time[-1]+100])
    plt.ylim([min(0, np.min(rew_avg)), np.max(rew_avg) + 100])
    plt.title('Average reward during training')
    plt.show()
    plt.close()

    print('Finished.')

    return


def get_args():
    parser = argparse.ArgumentParser()

    # parser.add_argument('--dir', dest='dir', type=str, default='logs')  # 'train' or 'test'
    # parser.add_argument('--file', dest='file', type=str, default='evaluations.npz')  # Model filename
    parser.add_argument('--path', dest='path', type=str, default='logs/evaluations.npz')
    args = parser.parse_args()

    return args


if __name__ == '__main__':
    arguments = get_args()
    plot_learning(arguments)
